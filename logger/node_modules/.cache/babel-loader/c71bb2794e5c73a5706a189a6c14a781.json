{"ast":null,"code":"import { GET_LOGS, DELETE_LOG, ADD_LOG, SET_CURRENT, CLEAR_CURRENT, SEARCH_LOGS, UPDATE_LOG, SET_LOADING, LOGS_ERROR, GET_DEVELOPER, DEVELOPER_ERROR } from './types'; // Action to get logs\n\nexport const getDevelopers = () => async dispatch => {\n  try {\n    // Set Loading To True\n    setLoading(); // Fetch from api\n\n    const res = await fetch('/developers');\n    const data = await res.json(); // Dispatch\n\n    dispatch({\n      type: GET_DEVELOPER,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: DEVELOPER_ERROR,\n      payload: err.response.data\n    });\n  }\n}; // Action to add a log\n\nexport const addLog = log => async dispatch => {\n  try {\n    // Set Loading To True\n    setLoading(); // Fetch from api\n\n    const res = await fetch('/logs', {\n      method: 'POST',\n      body: JSON.stringify(log),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json(); // Dispatch\n\n    dispatch({\n      type: ADD_LOG,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; // Action to delete a log\n\nexport const deleteLog = id => async dispatch => {\n  try {\n    // Set Loading To True\n    setLoading(); // Fetch from api\n\n    await fetch(`/logs/${id}`, {\n      method: 'DELETE'\n    }); // Dispatch\n\n    dispatch({\n      type: DELETE_LOG,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.data\n    });\n  }\n}; // Set Loading To True\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["/home/mohammadali/Documents/GitHub/React-Projects-Ali/logger/src/actions/developerActions.js"],"names":["GET_LOGS","DELETE_LOG","ADD_LOG","SET_CURRENT","CLEAR_CURRENT","SEARCH_LOGS","UPDATE_LOG","SET_LOADING","LOGS_ERROR","GET_DEVELOPER","DEVELOPER_ERROR","getDevelopers","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","addLog","log","method","body","JSON","stringify","headers","deleteLog","id"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,OAA/B,EAAwCC,WAAxC,EAAqDC,aAArD,EAAoEC,WAApE,EAAiFC,UAAjF,EAA6FC,WAA7F,EAA0GC,UAA1G,EAAsHC,aAAtH,EAAqIC,eAArI,QAA4J,SAA5J,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAMC,QAAN,IAAmB;AAClD,MAAI;AACA;AACAC,IAAAA,UAAU,GAFV,CAGA;;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,aAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB,CALA,CAMA;;AACAL,IAAAA,QAAQ,CAAC;AACTM,MAAAA,IAAI,EAAET,aADG;AAETU,MAAAA,OAAO,EAAEH;AAFA,KAAD,CAAR;AAIH,GAXD,CAWE,OAAOI,GAAP,EAAY;AACVR,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAER,eADD;AAELS,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaL;AAFjB,KAAD,CAAR;AAIH;AACJ,CAlBM,C,CAoBP;;AACA,OAAO,MAAMM,MAAM,GAAIC,GAAD,IAAS,MAAMX,QAAN,IAAmB;AAC9C,MAAI;AACA;AACAC,IAAAA,UAAU,GAFV,CAGA;;AACA,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAD,EAAU;AAC7BS,MAAAA,MAAM,EAAE,MADqB;AAE7BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,GAAf,CAFuB;AAG7BK,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHoB,KAAV,CAAvB;AAOA,UAAMZ,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB,CAXA,CAYA;;AACAL,IAAAA,QAAQ,CAAC;AACTM,MAAAA,IAAI,EAAEhB,OADG;AAETiB,MAAAA,OAAO,EAAEH;AAFA,KAAD,CAAR;AAIH,GAjBD,CAiBE,OAAOI,GAAP,EAAY;AACVR,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,UADD;AAELW,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaL;AAFjB,KAAD,CAAR;AAIH;AACJ,CAxBM,C,CA0BP;;AACA,OAAO,MAAMa,SAAS,GAAIC,EAAD,IAAQ,MAAMlB,QAAN,IAAmB;AAChD,MAAI;AACA;AACAC,IAAAA,UAAU,GAFV,CAGA;;AACA,UAAME,KAAK,CAAE,SAAQe,EAAG,EAAb,EAAgB;AACvBN,MAAAA,MAAM,EAAE;AADe,KAAhB,CAAX,CAJA,CAOA;;AACAZ,IAAAA,QAAQ,CAAC;AACTM,MAAAA,IAAI,EAAEjB,UADG;AAETkB,MAAAA,OAAO,EAAEW;AAFA,KAAD,CAAR;AAIH,GAZD,CAYE,OAAOV,GAAP,EAAY;AACVR,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,UADD;AAELW,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaL;AAFjB,KAAD,CAAR;AAIH;AACJ,CAnBM,C,CAqBP;;AACA,OAAO,MAAMH,UAAU,GAAG,MAAM;AAC5B,SAAO;AACHK,IAAAA,IAAI,EAAEX;AADH,GAAP;AAGH,CAJM","sourcesContent":["import { GET_LOGS, DELETE_LOG, ADD_LOG, SET_CURRENT, CLEAR_CURRENT, SEARCH_LOGS, UPDATE_LOG, SET_LOADING, LOGS_ERROR, GET_DEVELOPER, DEVELOPER_ERROR } from './types';\n\n// Action to get logs\nexport const getDevelopers = () => async dispatch =>  {\n    try {\n        // Set Loading To True\n        setLoading();\n        // Fetch from api\n        const res = await fetch('/developers');\n        const data = await res.json();\n        // Dispatch\n        dispatch({\n        type: GET_DEVELOPER,\n        payload: data\n        })\n    } catch (err) {\n        dispatch({\n            type: DEVELOPER_ERROR,\n            payload: err.response.data\n        })\n    }\n}\n\n// Action to add a log\nexport const addLog = (log) => async dispatch =>  {\n    try {\n        // Set Loading To True\n        setLoading();\n        // Fetch from api\n        const res = await fetch('/logs', {\n            method: 'POST',\n            body: JSON.stringify(log),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        const data = await res.json();\n        // Dispatch\n        dispatch({\n        type: ADD_LOG,\n        payload: data\n        })\n    } catch (err) {\n        dispatch({\n            type: LOGS_ERROR,\n            payload: err.response.data\n        })\n    }\n}\n\n// Action to delete a log\nexport const deleteLog = (id) => async dispatch =>  {\n    try {\n        // Set Loading To True\n        setLoading();\n        // Fetch from api\n        await fetch(`/logs/${id}`, {\n            method: 'DELETE'\n        });\n        // Dispatch\n        dispatch({\n        type: DELETE_LOG,\n        payload: id\n        })\n    } catch (err) {\n        dispatch({\n            type: LOGS_ERROR,\n            payload: err.response.data\n        })\n    }\n};\n\n// Set Loading To True\nexport const setLoading = () => {\n    return {\n        type: SET_LOADING\n    }\n}"]},"metadata":{},"sourceType":"module"}